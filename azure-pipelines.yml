# Este pipeline se activará cada vez que se haga un push a la rama 'main'
trigger:
- main

# Define el tipo de agente que se usará para ejecutar el pipeline.
# 'ubuntu-latest' es una imagen de Linux, ideal para tu proyecto Java.
pool:
  vmImage: 'ubuntu-latest'

# Los 'stages' dividen el proceso en fases lógicas.
# Aquí tenemos una fase de compilación y una de despliegue.
stages:

# =========================================================================
# STAGE 1: COMPILACIÓN y PRUEBAS
# Este stage se encarga de compilar el código de Java y ejecutar las pruebas unitarias.
# =========================================================================
- stage: Build
  displayName: 'Build y Test del Backend'
  jobs:
  - job: BuildJob
    displayName: 'Compilar con Maven'
    steps:
    # Tarea para instalar las dependencias y compilar el proyecto con Maven.
    # El comando 'clean install' también ejecuta las pruebas unitarias.
    - task: Maven@4
      displayName: 'Ejecutar mvn clean install'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean install'
        # La opción 'publishJUnitResults' publica los resultados de las pruebas en Azure.
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'

    # Tarea para publicar el archivo JAR compilado como un "artefacto".
    # Este artefacto es lo que usaremos en la fase de despliegue.
    - task: PublishBuildArtifacts@1
      displayName: 'Publicar el archivo JAR'
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)/target/*.jar'
        artifactName: 'drop-backend'

# =========================================================================
# STAGE 2: DESPLIEGUE EN QA
# Este stage toma el artefacto del stage anterior y lo despliega.
# =========================================================================
- stage: DeployToQA
  displayName: 'Desplegar en Ambiente de QA'
  # Este stage solo se ejecutará si el stage de compilación fue exitoso.
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployJob
    displayName: 'Despliegue a Azure App Service'
    # Define el ambiente de despliegue en Azure DevOps.
    # Puedes crear un ambiente llamado 'QA' para gestionar los recursos.
    environment: 'QA' 
    strategy:
      runOnce:
        deploy:
          steps:
          # Tarea para descargar el artefacto (el JAR) del pipeline.
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              artifactName: 'drop-backend'
              downloadPath: '$(System.ArtifactsDirectory)'

          # Tarea para desplegar la aplicación en Azure App Service.
          - task: AzureWebApp@1
            displayName: 'Deploy al App Service'
            inputs:
              # Nombre de la conexión de servicio que creaste para Azure en DevOps.
              azureSubscription: 'Conexión a Azure'
              # El tipo de aplicación, en este caso una web app.
              appType: 'webApp'
              # El nombre de tu App Service en Azure.
              appName: 'disramfor-api-qa'
              # La ruta al archivo JAR que descargamos.
              package: '$(System.ArtifactsDirectory)/drop-backend/*.jar'

